// Variables: a=source_array, b=source_size, c=loop_index, d=current_element, e=destination_array, f=destination_index, g=filter_threshold

// Example 1: Filtering Elements Greater Than a Threshold into a New Array
// Creates a new array containing only elements from a source array that are greater than a threshold.
// Note: MINT arrays are fixed size once created. The destination array is pre-sized
// to the maximum possible output size (same as source size) and may contain unused slots.

:F
a ! // Pop source array
g ! // Pop filter threshold

a /S b ! // Get source array size

// Create destination array (same size as source, may have empty slots)
b /A e ! // Allocate memory for destination array (treating as bytes for simplicity or as words depending on intended use)
         // Manual says /A is similar to byte arrays, let's use word size for numbers
         // Let's use a standard array definition instead of /A for clarity with numbers
         // Create a placeholder array and get its address
b [ ] s ! // Placeholder array of size b
s 0 /A e ! // Re-allocate memory using /A at a known size, get pointer 'e'

0 c ! // Source loop index
0 f ! // Destination index

b ( // Loop through source array
  a c ? d ! // Get element from source array

  d g > ( // If element > threshold
    d e f \?! // Store element in destination array (using byte store for simplicity, adjust for word if needed)
              // Manual's example for /A uses /? and /?/!, but \? and \?! are clearer for byte access.
              // Let's assume we are storing 16-bit words in /A allocated memory.
              // The /A section's examples are contradictory regarding /? vs \?.
              // Let's use the /? syntax from the /A section for word access.
    d e f /? /! // Store element in destination array (using /? and /? /! from /A section)
    f 1 + f !   // Increment destination index
  )

  c 1 + c ! // Increment source index
)

// The new array is at address 'e', its effective size is 'f'
// The example doesn't include printing, as that would add complexity.
// To use the result, one would need the pointer 'e' and the count 'f'.
e // Leave destination array pointer on stack
f // Leave effective size on stack
;

// Example Usage:
// Define a source array and a threshold
// Pass threshold, then array to the function
// 10 [1 15 5 20 8 12] F // Calls F with threshold 10 and the array
// After execution, the memory address of the filtered array is on stack (e), followed by its size (f).
