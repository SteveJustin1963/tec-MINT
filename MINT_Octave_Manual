# MINT-Octave Complete User Manual
## Version 2.5 (2025-10-01)

---

## Table of Contents

1. [Introduction](#introduction)
2. [Getting Started](#getting-started)
3. [Core Concepts](#core-concepts)
4. [Number Formats](#number-formats)
5. [Stack Operations](#stack-operations)
6. [Arithmetic Operations](#arithmetic-operations)
7. [Trigonometric Functions](#trigonometric-functions)
8. [Comparison and Logical Operations](#comparison-and-logical-operations)
9. [Variables](#variables)
10. [Arrays](#arrays)
11. [Control Flow](#control-flow)
12. [Functions](#functions)
13. [Input/Output](#inputoutput)
14. [System Variables](#system-variables)
15. [Debug Mode](#debug-mode)
16. [Complete Command Reference](#complete-command-reference)
17. [Examples](#examples)

---

## Introduction

MINT-Octave is a stack-based programming language interpreter inspired by Forth and MINT. It uses Reverse Polish Notation (RPN) and operates on a stack data structure. This Octave implementation extends the original MINT with 64-bit floating-point arithmetic, trigonometric functions, and enhanced debugging capabilities.

**Key Features:**
- Stack-based computation (RPN)
- 64-bit floating-point arithmetic
- 26 variables (a-z)
- User-defined functions (A-Z)
- Arrays with heap storage
- Loops and conditionals
- Comprehensive trigonometric functions
- Debug mode with file logging

---

## Getting Started

### Running MINT-Octave

1. Load the program in Octave:
   ```octave
   mint_octave_12
   ```

2. Choose debug mode when prompted:
   ```
   Enable debug mode? (y/n): n
   ```

3. You'll see the MINT prompt:
   ```
   > 
   ```

4. Exit by typing:
   ```
   bye
   ```

### Your First MINT Program

```mint
> 5 3 + .
8
```

This pushes 5 and 3 onto the stack, adds them, and prints the result.

---

## Core Concepts

### The Stack

MINT uses a **stack** - a Last-In-First-Out (LIFO) data structure. Operations typically:
1. Pop operands from the stack
2. Perform computation
3. Push results back onto the stack

**Example:**
```mint
> 10        // Stack: [10]
> 20        // Stack: [10, 20]
> +         // Stack: [30]
> .         // Print: 30, Stack: []
```

### Reverse Polish Notation (RPN)

Instead of `3 + 4`, you write `3 4 +`. Operands come first, operators follow.

**Traditional:** `(5 + 3) * 2`  
**MINT:** `5 3 + 2 *`

### Stack Effect Notation

Documentation uses this notation:
- `n n -- n` means: takes two numbers, returns one number
- `-- n` means: takes nothing, returns one number
- `n --` means: takes one number, returns nothing

---

## Number Formats

### Decimal Numbers

MINT-Octave uses **64-bit floating-point** numbers:

```mint
> 42 .              // Integer
42

> 3.14159 .         // Floating-point
3.14159

> -273.15 .         // Negative
-273.15

> 1.23e+36 .        // Scientific notation
1.23e+36

> -5.67e-12 .       // Negative scientific
-5.67e-12
```

**Range:** ±1.8e308 (much larger than original MINT's 16-bit limit)

### Hexadecimal Numbers

Prefix with `#` for hexadecimal:

```mint
> #FF .             // 255
255

> #1A2B .           // 6699
6699

> #FFFF .           // 65535
65535
```

**Note:** Hex display (`,` operator) masks to 16-bit (0000-FFFF)

---

## Stack Operations

### ' (Drop)
**Effect:** `n -- `  
Removes the top item from the stack.

```mint
> 10 20 30 '        // Stack: [10, 20]
> .                 // Prints: 20
```

### " (Dup)
**Effect:** `n -- n n`  
Duplicates the top item.

```mint
> 5 " .             // Prints: 5
> .                 // Prints: 5 (duplicate)
```

### $ (Swap)
**Effect:** `n m -- m n`  
Swaps the top two items.

```mint
> 10 20 $ . .       // Prints: 10 then 20
```

### % (Over)
**Effect:** `n m -- n m n`  
Copies the second item to the top.

```mint
> 10 20 % . . .     // Prints: 10, 20, 10
```

### /D (Stack Depth)
**Effect:** `-- n`  
Pushes the current stack depth.

```mint
> 1 2 3 /D .        // Prints: 3 (three items on stack)
```

### /CS (Clear Stack)
**Effect:** `... -- `  
Clears the entire stack.

```mint
> 1 2 3 4 5 /CS     // Stack is now empty
> /D .              // Prints: 0
```

---

## Arithmetic Operations

### Basic Arithmetic

**Addition: +**  
Effect: `n m -- result`

```mint
> 15 27 + .         // 42
```

**Subtraction: -**  
Effect: `n m -- result`

```mint
> 50 8 - .          // 42
```

**Multiplication: ***  
Effect: `n m -- result`

```mint
> 6 7 * .           // 42
```

**Division: /**  
Effect: `n m -- result`

```mint
> 84 2 / .          // 42 (floating-point division)
```

**Power: ****  
Effect: `base exponent -- result`

```mint
> 2 8 ** .          // 256 (2^8)
> 5 3 ** .          // 125 (5^3)
> 2 0.5 ** .        // 1.41421 (√2)
```

**Error handling:**
```mint
> -4 0.5 **         // ERROR: Cannot raise negative to fractional power
```

### Advanced Math Functions

**Square Root: /sqrt**  
Effect: `n -- result`

```mint
> 144 /sqrt .       // 12
> 2 /sqrt .         // 1.41421
```

**Absolute Value: /abs**  
Effect: `n -- result`

```mint
> -42 /abs .        // 42
> 17 /abs .         // 17
```

**Natural Logarithm: /ln**  
Effect: `n -- result`

```mint
> /e /ln .          // 1 (ln(e) = 1)
> 2.71828 /ln .     // 1
```

**Base-10 Logarithm: /log**  
Effect: `n -- result`

```mint
> 100 /log .        // 2 (log₁₀(100) = 2)
> 1000 /log .       // 3
```

**Exponential: /exp**  
Effect: `n -- result`

```mint
> 1 /exp .          // 2.71828 (e^1)
> 0 /exp .          // 1 (e^0)
```

### Rounding Functions

**Floor: /floor**  
Rounds down to nearest integer.

```mint
> 3.7 /floor .      // 3
> -2.3 /floor .     // -3
```

**Ceiling: /ceil**  
Rounds up to nearest integer.

```mint
> 3.2 /ceil .       // 4
> -2.7 /ceil .      // -2
```

**Round: /round**  
Rounds to nearest integer.

```mint
> 3.5 /round .      // 4
> 3.4 /round .      // 3
> -2.5 /round .     // -2
```

**Truncate: /trunc**  
Truncates toward zero.

```mint
> 3.9 /trunc .      // 3
> -3.9 /trunc .     // -3
```

### Other Math Operations

**Modulo: /mod**  
Effect: `a b -- remainder`

```mint
> 17 5 /mod .       // 2
> 100 7 /mod .      // 2
```

**Minimum: /min**  
Effect: `a b -- min`

```mint
> 5 3 /min .        // 3
> -10 -20 /min .    // -20
```

**Maximum: /max**  
Effect: `a b -- max`

```mint
> 5 3 /max .        // 5
> -10 -20 /max .    // -10
```

**Sign: /sign**  
Returns -1, 0, or 1.

```mint
> 42 /sign .        // 1
> -17 /sign .       // -1
> 0 /sign .         // 0
```

---

## Trigonometric Functions

All trig functions use **radians** by default.

### Basic Trigonometry

**Sine: /sin**  
Effect: `radians -- result`

```mint
> 0 /sin .          // 0
> /pi 2 / /sin .    // 1 (sin(π/2) = 1)
```

**Cosine: /cos**  
Effect: `radians -- result`

```mint
> 0 /cos .          // 1
> /pi /cos .        // -1 (cos(π) = -1)
```

**Tangent: /tan**  
Effect: `radians -- result`

```mint
> 0 /tan .          // 0
> /pi 4 / /tan .    // 1 (tan(π/4) = 1)
```

### Inverse Trigonometry

**Arcsine: /asin**  
Returns radians. Domain: [-1, 1]

```mint
> 0.5 /asin /deg .  // 30 degrees
> 1 /asin .         // 1.5708 (π/2 radians)
```

**Arccosine: /acos**  
Returns radians. Domain: [-1, 1]

```mint
> 0 /acos .         // 1.5708 (π/2 radians)
> 1 /acos .         // 0
```

**Arctangent: /atan**  
Returns radians.

```mint
> 1 /atan .         // 0.785398 (π/4 radians)
> 0 /atan .         // 0
```

**Two-argument Arctangent: /atan2**  
Effect: `y x -- radians`

```mint
> 1 1 /atan2 /deg . // 45 degrees
> 1 0 /atan2 /deg . // 90 degrees
```

### Hyperbolic Functions

**Hyperbolic Sine: /sinh**

```mint
> 0 /sinh .         // 0
> 1 /sinh .         // 1.1752
```

**Hyperbolic Cosine: /cosh**

```mint
> 0 /cosh .         // 1
> 1 /cosh .         // 1.54308
```

**Hyperbolic Tangent: /tanh**

```mint
> 0 /tanh .         // 0
> 1 /tanh .         // 0.761594
```

### Inverse Hyperbolic Functions

**Inverse Hyperbolic Sine: /asinh**

```mint
> 1 /asinh .        // 0.881374
```

**Inverse Hyperbolic Cosine: /acosh**  
Domain: x ≥ 1

```mint
> 1 /acosh .        // 0
> 2 /acosh .        // 1.31696
```

**Inverse Hyperbolic Tangent: /atanh**  
Domain: -1 < x < 1

```mint
> 0.5 /atanh .      // 0.549306
```

### Angle Conversion

**Degrees to Radians: /rad**

```mint
> 180 /rad .        // 3.14159 (π)
> 90 /rad .         // 1.5708 (π/2)
> 45 /rad .         // 0.785398 (π/4)
```

**Radians to Degrees: /deg**

```mint
> /pi /deg .        // 180
> /pi 2 / /deg .    // 90
```

### Constants

**/pi** - Push π (3.14159265...)

```mint
> /pi .             // 3.14159
> /pi 2 * .         // 6.28319 (2π)
```

**/e** - Push e (2.71828...)

```mint
> /e .              // 2.71828
> /e /ln .          // 1
```

### Example: Calculate Angle

```mint
// Calculate sin(45°)
> 45 /rad /sin .    // 0.707107

// Calculate angle from opposite and adjacent sides
> 3 4 /atan2 /deg . // 36.8699 degrees
```

---

## Comparison and Logical Operations

### Comparison Operators

Boolean values in MINT:
- **True:** -1
- **False:** 0

**Greater Than: >**  
Effect: `a b -- bool`

```mint
> 10 5 > .          // -1 (true)
> 3 7 > .           // 0 (false)
```

**Less Than: <**  
Effect: `a b -- bool`

```mint
> 5 10 < .          // -1 (true)
> 7 3 < .           // 0 (false)
```

**Equal: =**  
Effect: `a b -- bool`

```mint
> 5 5 = .           // -1 (true)
> 5 6 = .           // 0 (false)
```

### Bitwise Operations

All bitwise operations are masked to 16 bits (0-65535).

**Bitwise AND: &**  
Effect: `a b -- result`

```mint
> #FF #0F & , /N    // 000F
```

**Bitwise OR: |**  
Effect: `a b -- result`

```mint
> #F0 #0F | , /N    // 00FF
```

**Bitwise XOR: ^**  
Effect: `a b -- result`

```mint
> #FF #AA ^ , /N    // 0055
```

**Bitwise NOT: ~**  
Effect: `a -- result`

```mint
> #00FF ~ , /N      // FF00
> 0 ~ , /N          // FFFF
```

**Shift Left: {**  
Effect: `n -- result`

```mint
> 1 { .             // 2
> 5 { .             // 10
```

**Shift Right: }**  
Effect: `n -- result`

```mint
> 8 } .             // 4
> 5 } .             // 2
```

---

## Variables

MINT provides 26 variables named **a** through **z**.

### Storing Values

Syntax: `value variable !`

```mint
> 42 x !            // Store 42 in variable x
> x .               // Retrieve and print: 42
```

### Using Variables

Simply type the variable name to push its value:

```mint
> 10 a !            // a = 10
> 20 b !            // b = 20
> a b + .           // 30
```

### Examples

```mint
// Calculate circle area: A = πr²
> 5 r !             // radius = 5
> /pi r r * * .     // 78.5398

// Temperature conversion: F = C * 9/5 + 32
> 25 c !            // Celsius = 25
> c 9 * 5 / 32 + .  // 77 Fahrenheit

// Quadratic formula component
> 3 a ! 4 b ! 2 c ! // Coefficients
> b b * 4 a * c * - /sqrt . // √(b²-4ac)
```

---

## Arrays

Arrays are stored in heap memory and can contain 64-bit floating-point numbers.

### Creating Arrays

Syntax: `[ element1 element2 ... ]`

```mint
> [ 10 20 30 40 50 ] arr !
```

This creates an array and stores its address in variable `arr`.

### Accessing Array Elements

**Get Element: ?**  
Effect: `array_addr index -- value`

```mint
> arr 0 ? .         // 10 (first element)
> arr 2 ? .         // 30 (third element)
> arr 4 ? .         // 50 (fifth element)
```

**Set Element: ?!**  
Effect: `value array_addr index -- `

```mint
> 99 arr 2 ?!       // Set arr[2] = 99
> arr 2 ? .         // 99
```

### Array Size

**Get Size: /S**  
Effect: `array_addr -- size`

```mint
> arr /S .          // 5
```

### Array Examples

```mint
// Sum array elements
> [ 1 2 3 4 5 ] arr !
> 0 sum !           // Initialize sum
> 5 ( arr /i ? sum + sum ! ) // Loop through array
> sum .             // 15

// Find maximum in array
> [ 23 17 42 8 31 ] data !
> data 0 ? max !    // Initialize with first element
> data /S ( data /i ? max > ( data /i ? max ! ) ) // Update max
> max .             // 42

// Array with variables
> 10 a ! 20 b ! 30 c !
> [ a b c ] vals !
> vals 1 ? .        // 20
```

---

## Control Flow

### Loops

**Basic Loop Syntax:**

```mint
count ( body )
```

Executes `body` `count` times.

**Examples:**

```mint
// Print numbers 0-4
> 5 ( /i . /N )
0
1
2
3
4

// Calculate factorial of 5
> 1 result !
> 5 ( /i 1 + result * result ! )
> result .          // 120

// Print squares
> 10 ( /i " * . /N )
0
1
4
9
16
25
36
49
64
81
```

### Loop Variables

**/i** - Inner loop counter (0-based)

```mint
> 3 ( /i . /N )     // Prints: 0, 1, 2
```

**/j** - Outer loop counter (for nested loops)

```mint
> 3 ( 3 ( /i /j + . /N ) )
// Prints: 0,1,2, 1,2,3, 2,3,4
```

### While Loops

**/W** - Break if top of stack is false (0)

```mint
// Count down from 10
> 10 counter !
> /U (
    counter .
    counter 1 - counter !
    counter /W
  )
```

**/U** - Unlimited loop constant

```mint
// Infinite loop with condition
> 0 i !
> /U (
    i .
    i 1 + i !
    i 5 > /W      // Break when i > 5
  )
```

### Conditionals (If-Then-Else)

**Syntax:**

```mint
condition ( then_body ) /E ( else_body )
```

**Examples:**

```mint
// Simple if-then-else
> 10 x !
> x 5 > ( `x is large` ) /E ( `x is small` )

// Check even or odd
> 7 n !
> n 2 /mod 0 = ( `even` ) /E ( `odd` )

// Absolute value
> -42 n !
> n 0 < ( n -1 * ) /E ( n ) .
```

### Boolean Constants

**/T** - True (-1)  
**/F** - False (0)

```mint
> /T .              // -1
> /F .              // 0
> 5 3 > /T = .      // -1 (true)
```

---

## Functions

Define reusable functions with letters **A** through **Z**.

### Single-Line Functions

**Syntax:** `:Name body ;`

```mint
> :D " * ;          // D = square function
> 5 D .             // 25
```

### Multi-Line Functions

```mint
> :F
... " *             // x²
... 4 *             // 4x²
... ;
> 3 F .             // 36 (4 * 3²)
```

### Function Examples

**Square function:**
```mint
> :S " * ;
> 7 S .             // 49
```

**Cube function:**
```mint
> :C " " * * ;
> 4 C .             // 64
```

**Factorial:**
```mint
> :F 1 result ! $ 1 + ( /i 1 + result * result ! ) result ;
> 5 F .             // 120
```

**Fibonacci:**
```mint
> :FIB
... 1 a ! 1 b !
... 2 - (
...   a b + c !
...   b a !
...   c b !
... )
... b
... ;
> 10 FIB .          // 55 (10th Fibonacci number)
```

**Hypotenuse:**
```mint
> :H " * $ " * + /sqrt ;
> 3 4 H .           // 5 (√(3²+4²))
```

**Average:**
```mint
> :AVG + 2 / ;
> 10 20 AVG .       // 15
```

### List All Functions

```mint
> list
```

Shows all defined functions with their bodies.

---

## Input/Output

### Print Operations

**Print Number: .**  
Effect: `n -- `

```mint
> 42 .              // Prints: 42
```

**Print Hexadecimal: ,**  
Effect: `n -- `

```mint
> 255 , /N          // Prints: 00FF
> #DEAD , /N        // Prints: DEAD
```

**Print Newline: /N**

```mint
> 1 . 2 . 3 .       // Prints: 1 2 3 (on one line)
> 1 . /N 2 . /N     // Prints: 1 \n 2 (on separate lines)
```

**Print Character: /C**  
Effect: `ascii -- `

```mint
> 65 /C             // Prints: A
> 72 /C 105 /C      // Prints: Hi
```

**Print String: `text`**

```mint
> `Hello, World!` /N
Hello, World!

> `Result: ` 42 . /N
Result: 42
```

### Input Operations

**Read Character: /K**  
Effect: `-- ascii`

Reads one character and pushes its ASCII code.

```mint
> /K .              // Type 'A' → prints: 65
```

**Read String: /KS**  
Effect: `-- char1 char2 ... charN count`

Reads a string and pushes ASCII codes plus count.

```mint
> /KS               // Type "Hi"
> .                 // 2 (count)
> /C /C             // Prints: iH (reverse order due to stack)
```

---

## System Variables

### /c (Carry Flag)

Set by arithmetic operations (currently always 0 for 64-bit floats).

```mint
> 5 3 + /c .        // 0
```

### /r (Remainder/Overflow)

Set by division and multiplication (currently always 0 for floats).

```mint
> 10 3 / /r .       // 0
```

### /i (Loop Counter)

Current inner loop iteration (0-based).

```mint
> 5 ( /i . /N )     // 0, 1, 2, 3, 4
```

### /j (Outer Loop Counter)

Outer loop counter for nested loops.

```mint
> 2 ( 3 ( /i /j + . /N ) )
```

---

## Debug Mode

### Enabling Debug Mode

At startup:
```
Enable debug mode? (y/n): y
```

Or toggle during session:
```mint
> debug
```

### Debug Output Shows

- Token processing
- Stack state before/after operations
- Variable changes
- Function calls
- Loop iterations
- Array operations
- Capture mode status

### Debug Log File

When enabled, debug output is saved to:
```
mint_debug_YYYYMMDD_HHMMSS.log
```

### Example Debug Output

```mint
> 5 3 + .

[DEBUG] Processing token: '5'
[DEBUG] NUMBER: 5
[DEBUG] STACK: [5]
[DEBUG] Processing token: '3'
[DEBUG] NUMBER: 3
[DEBUG] STACK: [5, 3]
[DEBUG] Processing token: '+'
[DEBUG] BEFORE +: stack=[5, 3]
[DEBUG] AFTER +: 5 + 3 = 8, stack=[8]
8
```

---

## Complete Command Reference

### Arithmetic (17 commands)

| Command | Stack Effect | Description |
|---------|--------------|-------------|
| `+` | `a b -- sum` | Addition |
| `-` | `a b -- diff` | Subtraction |
| `*` | `a b -- prod` | Multiplication |
| `/` | `a b -- quot` | Division |
| `**` | `base exp -- result` | Exponentiation |
| `/sqrt` | `n -- result` | Square root |
| `/abs` | `n -- result` | Absolute value |
| `/ln` | `n -- result` | Natural logarithm |
| `/log` | `n -- result` | Base-10 logarithm |
| `/exp` | `n -- result` | e^x |
| `/floor` | `n -- result` | Round down |
| `/ceil` | `n -- result` | Round up |
| `/round` | `n -- result` | Round to nearest |
| `/mod` | `a b -- rem` | Modulo |
| `/min` | `a b -- min` | Minimum |
| `/max` | `a b -- max` | Maximum |
| `/sign` | `n -- sign` | Sign (-1, 0, 1) |
| `/trunc` | `n -- result` | Truncate to integer |

### Trigonometry (17 commands)

| Command | Stack Effect | Description |
|---------|--------------|-------------|
| `/sin` | `rad -- result` | Sine |
| `/cos` | `rad -- result` | Cosine |
| `/tan` | `rad -- result` | Tangent |
| `/asin` | `n -- rad` | Arcsine |
| `/acos` | `n -- rad` | Arccosine |
| `/atan` | `n -- rad` | Arctangent |
| `/atan2` | `y x -- rad` | Two-arg arctangent |
| `/sinh` | `n -- result` | Hyperbolic sine |
| `/cosh` | `n -- result` | Hyperbolic cosine |
| `/tanh` | `n -- result` | Hyperbolic tangent |
| `/asinh` | `n -- result` | Inverse hyperbolic sine |
| `/acosh` | `n -- result` | Inverse hyperbolic cosine |
| `/atanh` | `n -- result` | Inverse hyperbolic tangent |
| `/pi` | `-- pi` | Push π constant |
| `/e` | `-- e` | Push e constant |
| `/deg` | `rad -- deg` | Radians to degrees |
| `/rad` | `deg -- rad` | Degrees to radians |

### Stack Operations (6 commands)

| Command | Stack Effect | Description |
|---------|--------------|-------------|
| `'` | `n -- ` | Drop top item |
| `"` | `n -- n n` | Duplicate top item |
| `$` | `a b -- b a` | Swap top two items |
| `%` | `a b -- a b a` | Copy second to top |
| `/D` | `-- n` | Push stack depth |
| `/CS` | `... -- ` | Clear stack |

### Comparison (3 commands)

| Command | Stack Effect | Description |
|---------|--------------|-------------|
| `>` | `a b -- bool` | Greater than |
| `<` | `a b -- bool` | Less than |
| `=` | `a b -- bool` | Equal |

### Bitwise (6 commands)

| Command | Stack Effect | Description |
|---------|--------------|-------------|
| `&` | `a b -- result` | Bitwise AND |
| `\|` | `a b -- result` | Bitwise OR |
| `^` | `a b -- result` | Bitwise XOR |
| `~` | `n -- result` | Bitwise NOT |
| `{` | `n -- result` | Shift left |
| `}` | `n -- result` | Shift right |

### Variables (2 commands)

| Command | Stack Effect | Description |
|---------|--------------|-------------|
| `a-z` | `-- value` | Push variable value |
| `!` | `val var -- ` | Store to variable |

### Arrays (4 commands)

| Command | Stack Effect | Description |
|---------|--------------|-------------|
| `[...]` | `-- addr` | Create array |
| `?` | `addr idx -- val` | Get array element |
| `?!` | `val addr idx -- ` | Set array element |
| `/S` | `addr -- size` | Get array size |

### Control Flow (6 commands)

| Command | Stack Effect | Description |
|---------|--------------|-------------|
| `(...)` | `count -- ` | Loop n times |
| `/U` | `-- -1` | Unlimited loop constant |
| `/W` | `bool -- ` | Break if false |
| `/E` | Separator | Else (in conditionals) |
| `/T` | `-- -1` | True constant |
| `/F` | `-- 0` | False constant |

### Functions (2 commands)

| Command | Description |
|---------|-------------|
| `:A ... ;` | Define function A-Z |
| `list` | List all functions |

### System Variables (4 commands)

| Command | Stack Effect | Description |
|---------|--------------|-------------|
| `/c` | `-- flag` | Carry flag |
| `/r` | `-- flag` | Remainder/overflow |
| `/i` | `-- counter` | Inner loop counter |
| `/j` | `-- counter` | Outer loop counter |

### Input/Output (7 commands)

| Command | Stack Effect | Description |
|---------|--------------|-------------|
| `.` | `n -- ` | Print number |
| `,` | `n -- ` | Print hex |
| `/N` | ` -- ` | Print newline |
| `/C` | `ascii -- ` | Print character |
| `/K` | `-- ascii` | Read character |
| `/KS` | `-- chars... count` | Read string |
| \`text\` | ` -- ` | Print literal string |

### Miscellaneous (4 commands)

| Command | Description |
|---------|-------------|
| `//` | Comment (to end of line) |
| `help` | Show help |
| `debug` | Toggle debug mode |
| `bye` | Exit MINT |

---

## Examples

### Example 1: Basic Arithmetic

```mint
// Calculate: (5 + 3) × (10 - 2)
> 5 3 + 10 2 - * .
64
```

### Example 2: Variables and Formulas

```mint
// Distance formula: d = √((x₂-x₁)² + (y₂-y₁)²)
> 0 x1 ! 0 y1 !     // Point 1: (0,0)
> 3 x2 ! 4 y2 !     // Point 2: (3,4)
> x2 x1 - " *       // (x₂-x₁)²
> y2 y1 - " * +     // + (y₂-y₁)²
> /sqrt .           // 5
```

### Example 3: Trigonometry

```mint
// Calculate height of building from angle and distance
// h = distance × tan(angle)
> 100 distance !    // 100m from building
> 30 angle !        // 30° angle of elevation
> distance angle /rad /tan * .
57.735              // Building is ~58m tall
```

### Example 4: Arrays

```mint
// Calculate average of array
> [ 10 20 30 40 50 ] data !
> 0 sum !
> data /S count !
> count ( data /i ? sum + sum ! )
> sum count / .
30
```

### Example 5: Loops and Conditionals

```mint
// Print even numbers from 0-10
> 11 (
    /i 2 /mod 0 = (
      /i . /N
    )
  )
0
2
4
6
8
10
```

### Example 6: Function Definition

```mint
// Define and use a circle area function
> :CIRCLE_AREA /pi $ " * * ;
> 5 CIRCLE_AREA .   // Area with radius 5
78.5398
> 10 CIRCLE_AREA .  // Area with radius 10
314.159
```

### Example 7: Nested Loops

```mint
// Multiplication table
> 5 ( 
    5 (
      /j 1 + /i 1 + * . 32 /C  // Print product and space
    )
    /N                          // New line
  )
1 2 3 4 5 
2 4 6 8 10 
3 6 9 12 15 
4 8 12 16 20 
5 10 15 20 25
```

### Example 8: Fibonacci Sequence

```mint
// Print first 10 Fibonacci numbers
> 0 a ! 1 b !
> a . /N b . /N
> 8 (
    a b + c !
    b a !
    c b !
    c . /N
  )
0
1
1
2
3
5
8
13
21
34
```

### Example 9: Prime Number Check

```mint
// Check if 17 is prime
> :IS_PRIME
... " /sqrt /floor limit !
... /T is_prime !
... 2 (
...   /i 2 + divisor !
...   $ divisor /mod 0 = (
...     /F is_prime !
...   )
...   divisor limit > /W
... )
... '
... is_prime
... ;
> 17 IS_PRIME ( `Prime` ) /E ( `Not prime` )
Prime
```

### Example 10: Temperature Converter

```mint
// Celsius to Fahrenheit converter
> :C2F 9 * 5 / 32 + ;
> :F2C 32 - 5 * 9 / ;
> 100 C2F .         // 212 (boiling point)
> 32 F2C .          // 0 (freezing point)
```

---

## Tips and Tricks

### Stack Visualization

Enable debug mode to see stack changes:
```mint
> debug
> 5 3 + 2 *
[DEBUG] STACK: [5]
[DEBUG] STACK: [5, 3]
[DEBUG] STACK: [8]
[DEBUG] STACK: [8, 2]
[DEBUG] STACK: [16]
```

### Common Patterns

**Duplicate and use:**
```mint
> 5 " * .           // Square: x × x
```

**Keep copy for later:**
```mint
> 10 " 5 + $ .      // Add 5, then print original
```

**Three-way comparison:**
```mint
> 5 " 3 > $ 7 < & . // Check if 3 < 5 < 7
```

### Error Handling

MINT will show errors for:
- Stack underflow
- Division by zero
- Array out of bounds
- Invalid domain (sqrt of negative, etc.)
- Undefined functions

### Performance Tips

1. Use functions for repeated code
2. Clear stack with `/CS` when needed
3. Use variables to avoid stack juggling
4. Comment your code with `//`

---

## Common Pitfalls

### Stack Order

Remember RPN order:
```mint
> 10 5 - .          // Correct: 10 - 5 = 5
> 5 10 - .          // Wrong: 5 - 10 = -5
```

### Variable Storage

Variable must come BEFORE `!`:
```mint
> 42 x !            // Correct
> x 42 !            // Wrong - stores 42's value to location 42
```

### Loop Counters

Loop counters are 0-based:
```mint
> 3 ( /i . )        // Prints: 0, 1, 2 (not 1, 2, 3)
```

### Angle Units

Trig functions use radians:
```mint
> 90 /sin .         // Wrong - sin(90 radians)
> 90 /rad /sin .    // Correct - sin(90°) = 1
```

---

## Quick Reference Card

```
NUMBERS:  123  3.14  -42  1e6  #FF
STACK:    ' " $ % /D /CS
MATH:     + - * / ** /sqrt /abs /ln /log /exp
TRIG:     /sin /cos /tan /asin /acos /atan /atan2
HYPER:    /sinh /cosh /tanh /asinh /acosh /atanh
COMPARE:  > < =
BITWISE:  & | ^ ~ { }
VARS:     a-z !
ARRAYS:   [...] ? ?! /S
LOOPS:    count ( body )  /U /W /i /j
COND:     cond ( then ) /E ( else )
BOOL:     /T /F
FUNC:     :A ... ;  list
I/O:      . , /N /C /K /KS `text`
SYSTEM:   /c /r /pi /e
MISC:     // help debug bye
```

---

## Differences from Original MINT

This Octave implementation differs from original MINT:

1. **64-bit floating-point** instead of 16-bit integers
2. **Expanded trigonometry** (15 trig functions + conversions)
3. **Advanced math** (sqrt, abs, ln, log, exp, rounding, etc.)
4. **Debug mode** with file logging
5. **Multi-line function** definitions
6. **Extended I/O** (string literals with backticks)
7. **Array support** for floats, not just integers
8. **Scientific notation** (1.23e+36)

Not implemented:
- Byte mode (`\`)
- I/O ports (`/O`, `/I`)
- Some system variables (`/h`, `/k`, `/s`, `/z`)
- Machine code execution (`/X`)
- Anonymous functions (`:@`)
- Memory allocation (`/A`)

---

## Credits

MINT-Octave v2.5 (2025)  
Based on MINT by Ken Boak  
Implemented in GNU Octave

---

**End of Manual**
